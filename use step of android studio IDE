Here's a step-by-step guide to help you create a simple Java-based Android app using Android Studio, run it on the emulator, and test it on a mobile device via USB connection.

---

### **Step 1: Install Android Studio**
1. **Download Android Studio** from [developer.android.com](https://developer.android.com/studio).
2. Install it by following the on-screen instructions.
3. During installation, let the setup download the necessary SDK components.

---

### **Step 2: Create a New Android Project**
1. Open Android Studio.
2. Click on **"Start a New Android Studio Project"**.
3. Select a template:
   - For beginners, choose **"Empty Activity"**.
4. Click **Next**.
5. Configure your project:
   - **Name**: Give your app a name (e.g., "MyFirstApp").
   - **Package Name**: Use a unique name (e.g., `com.example.myfirstapp`).
   - **Save Location**: Choose where to save the project.
   - **Language**: Select **Java**.
   - **Minimum SDK**: Choose an API level (e.g., API 21 for wider compatibility).
6. Click **Finish** to create the project.

---

### **Step 3: Understand the Project Structure**
1. **Main Components**:
   - `app/src/main/java`: Contains Java code for the app logic.
   - `app/src/main/res/layout`: Contains XML files for UI design.
   - `AndroidManifest.xml`: Declares app configuration.
2. Open `MainActivity.java` (default activity file).

---

### **Step 4: Design Your App's UI**
1. Go to `res/layout/activity_main.xml`.
2. Use the **Design View** or **Code View**:
   - Drag and drop UI elements like `Button`, `TextView`, or `EditText`.
   - Example XML code for a simple UI:
     ```xml
     <?xml version="1.0" encoding="utf-8"?>
     <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_width="match_parent"
         android:layout_height="match_parent">

         <TextView
             android:id="@+id/helloText"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:text="Hello, World!"
             android:layout_centerInParent="true"
             android:textSize="24sp"/>
     </RelativeLayout>
     ```

---

### **Step 5: Add Logic in Java**
1. Open `MainActivity.java` in the `java` folder.
2. Example code to display a log message:
   ```java
   package com.example.myfirstapp;

   import android.os.Bundle;
   import android.util.Log;
   import androidx.appcompat.app.AppCompatActivity;

   public class MainActivity extends AppCompatActivity {
       @Override
       protected void onCreate(Bundle savedInstanceState) {
           super.onCreate(savedInstanceState);
           setContentView(R.layout.activity_main);

           Log.d("MainActivity", "App Started!");
       }
   }
   ```

---

### **Step 6: Run Your App on the Emulator**
1. **Set up an Emulator**:
   - Go to **Tools > Device Manager**.
   - Click **Create Device**.
   - Choose a device (e.g., Pixel 4) and click **Next**.
   - Select a system image (download one if necessary) and click **Finish**.
2. **Run the App**:
   - Click the **Run** button (green triangle in the toolbar).
   - Select the emulator as the target device.
   - Wait for the emulator to start and load the app.

---

### **Step 7: Run Your App on a Physical Device**
1. **Enable Developer Options** on your Android device:
   - Go to **Settings > About Phone**.
   - Tap **Build Number** 7 times to enable developer mode.
2. **Enable USB Debugging**:
   - Go to **Settings > Developer Options**.
   - Enable **USB Debugging**.
3. **Connect Your Device**:
   - Use a USB cable to connect the device to your computer.
   - If prompted, allow USB debugging on your phone.
4. **Run the App**:
   - Click the **Run** button in Android Studio.
   - Select your device from the connected devices list.
   - The app will install and launch on your phone.

---

### **Step 8: Test the App**
- Interact with your app on the emulator or physical device.
- Check the logs in Android Studio's **Logcat** tab for debugging.

---

### **Key Tips for Beginners**
- Experiment with UI elements in XML.
- Explore Android Studio's built-in tools like **Layout Inspector**.
- Practice modifying Java code to add functionality to your app.

With these steps, you should be able to create and test a basic Android app successfully! 
